import "./hand" as getHand;
from "./hand" import HandInfo, CommonCards, RevealCard;
from "./cardUtils" import assertIsSorted7;
from "./player" import Player, verifySignature, checkCoverIntegrity, checkWinnerAndChoppersIntegrity, checkWinAmountIntegrity, comparePlayer;
import "./rng" as getCards;

def main(
    u64 gameId,
    u32[8] commitedR1,
    u32 R1,
    u32 R2,
    Player[9] players,
    u32[9] handSortedPlayers, // handSortedPlayers[0] is the winning player
    u32[9] stackSortedPlayers, // stackSortedPlayers[0] is the shortest player
    bool[8] chop,      // chop[i] == true <=> handSortedPlayers[i].strength == handSortedPlayers[i+1].strength
    RevealCard[52] revealCards
) -> bool {
    bool mut ret = true;

    // Check signatures
    u32[8] mut hash = [0; 8];
    for u32 i in 0..9 {
        assert(verifySignature(players[i]));
    }

    // Shuffle cards
    u32[52] cards = getCards(R1, R2);

    // Check integrity of revealCards
    for u32 i in 0..52 {
        // ret = ret && (!revealCards[i].reveal || revealCards[i].card == cards[i]);
        assert(!revealCards[i].reveal || revealCards[i].card == cards[i]);
    }

    // Check integrity of sorted7Cards
    for u32 i in 0..9 {
        u32[7] sorted7Cards = players[i].sorted7Cards;
        u32[7] any7Cards = [cards[i], cards[i + 9], cards[18 + 0], cards[18 + 1], cards[18 + 2], cards[18 + 3], cards[18 + 4]];
        bool unused1 = assertIsSorted7(any7Cards, sorted7Cards);
    }

    // Check integrity of handinfo
    for u32 i in 0..9 {
        assert(players[i].handinfo == if players[i].seated && !players[i].a.fold {
            getHand(players[i].sorted7Cards, players[i].hint)
        } else {
            HandInfo{ handType: 0, handStrength: 0 }
        });
    }

    // Check integrity of player relative card strength
    for u32 i in 0..8 {
        u32 compareResult = comparePlayer(players[handSortedPlayers[i]], players[handSortedPlayers[i + 1]]);
        assert(compareResult == 2 && !chop[i] || compareResult == 1 && chop[i]);

        assert(players[handSortedPlayers[i]].strength == players[handSortedPlayers[i + 1]].strength && chop[i]
            || players[handSortedPlayers[i]].strength == players[handSortedPlayers[i + 1]].strength + 1 && !chop[i]);
    }
    assert(players[handSortedPlayers[8]].strength == 0);

    // Check integrity of cover info
    bool unused2 = checkCoverIntegrity(players);

    // Check integrity of stack info
    bool unused3 = checkWinnerAndChoppersIntegrity(players, stackSortedPlayers);

    // Check integrity of win amount
    bool unused4 = checkWinAmountIntegrity(players, stackSortedPlayers);

    return ret;
}